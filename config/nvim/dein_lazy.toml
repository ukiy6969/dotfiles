# Rust
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
hook_source = '''
  let g:rustfmt_autosave = 1
'''

[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = ['rust']

[[plugins]]
repo = 'timonv/vim-cargo'
on_ft = ['rust']
hook_source = '''
'''

# Web api
[[plugins]]
repo = 'mattn/webapi-vim'

# Javascript
[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript']
hook_source = '''
  " javascript
  let g:javascript_enable_domhtmlcss = 1
  let g:syntastic_javascript_checkers=['eslint']
'''

[[plugins]]
repo = 'mtscout6/syntastic-local-eslint.vim'
on_ft = ['javascript']

[[plugins]]
repo = 'ternjs/tern_for_vim'
build = 'npm install'
on_ft = ['javascript']
hook_source = '''
  "let g:tern_show_argument_hints="on_move"
  let g:tern_map_keys = 1
'''

[[plugins]]
repo = 'heavenshell/vim-jsdoc'
on_ft = ['javascript']

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = ['javascript']

# Markdown
[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['Markdown', 'markdown']

# Stylus
[[plugins]]
repo = 'wavded/vim-stylus'
on_ft = ['stylus']

# Latex
[[plugins]]
repo = 'lervag/vimtex'
rev = 'master'
on_ft = ['tex', 'Tex', 'latex']
hook_source = '''
  " systastic
  let g:syntastic_auto_loc_list = 1

  let g:vimtex_latexmk_continuous = 1
  let g:vimtex_latexmk_options = '-pdfdvi'
  let g:vimtex_view_general_viewer = 'okular'
  let g:vimtex_view_general_options = '--unique @pdf\#src:@line@tex'
'''

# Haskell
[[plugins]]
repo = 'neovimhaskell/haskell-vim'
on_ft = ['haskell']
hook_source = '''
let g:neomake_open_list = 1
'''

[[plugins]]
repo = 'itchyny/vim-haskell-indent'
on_ft = ['haskell']

[[plugins]]
repo = 'eagletmt/ghcmod-vim'
on_ft = ['haskell']
hook_source = '''
nnoremap <C-l> :noh<C-l><CR>:GhcModTypeClear<CR>
'''

[[plugins]]
repo = 'Shougo/neocomplcache'
on_ft = ['haskell']

[[plugins]]
repo = 'ujihisa/neco-ghc'
on_ft = ['haskell']

[[plugins]]
repo = 'Twinside/vim-hoogle'
on_ft = ['haskell']

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
on_ft = ['haskell']

[[plugins]]
repo = 'ujihisa/unite-haskellimport'
on_ft = ['haskell']

[[plugins]]
repo = 'majutsushi/tagbar'
on_ft = ['haskell']
hook_source = '''
set tags=tags;/,codex.tags;/
let g:tagbar_type_haskell = {
    \ 'ctagsbin'  : 'hasktags',
    \ 'ctagsargs' : '-x -c -o-',
    \ 'kinds'     : [
        \  'm:modules:0:1',
        \  'd:data: 0:1',
        \  'd_gadt: data gadt:0:1',
        \  't:type names:0:1',
        \  'nt:new types:0:1',
        \  'c:classes:0:1',
        \  'cons:constructors:1:1',
        \  'c_gadt:constructor gadt:1:1',
        \  'c_a:constructor accessors:1:1',
        \  'ft:function types:1:1',
        \  'fi:function implementations:0:1',
        \  'o:others:0:1'
    \ ],
    \ 'sro'        : '.',
    \ 'kind2scope' : {
        \ 'm' : 'module',
        \ 'c' : 'class',
        \ 'd' : 'data',
        \ 't' : 'type'
    \ },
    \ 'scope2kind' : {
        \ 'module' : 'm',
        \ 'class'  : 'c',
        \ 'data'   : 'd',
        \ 'type'   : 't'
    \ }
\ }
map <leader>tg :!codex update --force<CR>:call system("git-hscope -X TemplateHaskell")<CR><CR>:call LoadHscope()<CR>
set csprg=hscope
set csto=1 " search codex tags first

nnoremap <silent> <C-\> :cs find c <C-R>=expand("<cword>")<CR><CR>
" Automatically make cscope connections
function! LoadHscope()
  let db = findfile("hscope.out", ".;")
  if (!empty(db))
    let path = strpart(db, 0, match(db, "/hscope.out$"))
    set nocscopeverbose " suppress 'duplicate connection' error
    exe "cs add " . db . " " . path
    set cscopeverbose
  endif
endfunction
au BufEnter /*.hs call LoadHscope()
map <leader>tt :TagbarToggle<CR>
'''

[[plugins]]
repo = 'ujihisa/ref-hoogle'
on_ft = ['haskell']

[[plugins]]
repo = 'nbouscal/vim-stylish-haskell'
on_ft = ['haskell']
