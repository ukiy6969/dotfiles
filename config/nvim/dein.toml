# Let dein manage dein
# Required:
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''

	" Define mappings
	autocmd FileType denite call s:denite_my_settings()
	function! s:denite_my_settings() abort
	  nnoremap <silent><buffer><expr> <CR>
	  \ denite#do_map('do_action')
	  nnoremap <silent><buffer><expr> d
	  \ denite#do_map('do_action', 'delete')
	  nnoremap <silent><buffer><expr> p
	  \ denite#do_map('do_action', 'preview')
	  nnoremap <silent><buffer><expr> q
	  \ denite#do_map('quit')
	  nnoremap <silent><buffer><expr> i
	  \ denite#do_map('open_filter_buffer')
	  nnoremap <silent><buffer><expr> <Space>
	  \ denite#do_map('toggle_select').'j'
	endfunction

	autocmd FileType denite-filter call s:denite_filter_my_settings()
	function! s:denite_filter_my_settings() abort
	  imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
	endfunction

  call denite#custom#option('_', 'statusline', v:false)

  let g:mapleader = ","
  nnoremap <silent><Leader>bu :Denite buffer<CR>
  nnoremap <silent><Leader>o :DeniteProjectDir -buffer-name=files -split=floating file <CR>
  nnoremap <silent><Leader>co :DeniteBufferDir -buffer-name=files file <CR>
  nnoremap <silent><Leader>ot :DeniteProjectDir -buffer-name=files file_rec -default-action=tabopen <CR>

  " Rg command on grep source
  call denite#custom#var('grep', 'command', ['rg'])
  call denite#custom#var('grep', 'default_opts',
      \ ['-i', '--vimgrep'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'final_opts', [])

  " Change file/rec command.
  call denite#custom#var('file/rec', 'command',
  \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])

  " grep
  command! -nargs=? -complete=dir Dgrep call s:Dgrep(<f-args>)
  function s:Dgrep(...)
    if a:0 > 0
      execute(':Denite -buffer-name=grep-buffer-denite grep -path='.a:1)
    else
      execute(':Denite -buffer-name=grep-buffer-denite grep')
    endif
  endfunction
  " show Denite grep results
  command! Dresume execute(':Denite -resume -buffer-name=grep-buffer-denite')
  " next Denite grep result
  command! Dnext execute(':Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=+1 -immediately ')
  " previous Denite grep result
  command! Dprev execute(':Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=-1 -immediately ')
  " neoyank
  nnoremap <silent><Leader>y :Denite neoyank <CR>
'''

[[plugins]]
repo = 'chemzqm/denite-git'
hook_add = '''
  nnoremap <silent><Leader>gs :Denite gitstatus<CR>
'''

# Translate
[[plugins]]
repo = 'daisuzu/translategoogle.vim'

# vimproc
[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

# filer
[[plugins]]
repo = 'Shougo/defx.nvim'
hook_source = '''
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
  \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> c
  \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
  \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
  \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('drop', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('drop', 'pedit')
  nnoremap <silent><buffer><expr> K
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
  \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
  \ defx#do_action('toggle_columns',
  \                'mark:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
  \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d
  \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
  \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
  \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
  \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
  \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
  \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
  \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
  \ defx#do_action('change_vim_cwd')
endfunction
nnoremap <silent><Leader>f :Defx -split=vertical -winwidth=50 -direction=topleft -toggle<CR>
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'

repo = 'Shougo/neosnippet.vim'
hook_source = '''
  " neosnippet
  " Plugin key-mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2
  endif
'''
on_i = 1
on_ft = ['snippets']
depends = ['neosnippet-snippets']

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# Deoplete
[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#auto_complete_delay = 0
  let g:deoplete#auto_complete_start_length = 1
  call deoplete#custom#option('sources', {
      \ 'scala': ['buffer', 'dictionary', 'file', 'member', 'omni', 'tag'],
      \})

  call deoplete#custom#var('omni', 'input_patterns', {
      \ 'scala': [
      \     '[^. *\t]\.\w*',
      \     '[:\[,] ?\w*',
      \     '^import .*'
      \   ]
      \})
'''
on_i = 1

[[plugins]]
repo = 'Shougo/vimshell'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup=1
  let g:indent_guides_start_level=2
  let g:indent_guides_auto_colors=0
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=235
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=234
  let g:indent_guides_color_change_percent = 30
  let g:indent_guides_guide_size = 1
'''

# [[plugins]]
# repo = 'bronson/vim-trailing-whitespace'

# Tmux
[[plugins]]
repo = 'sjl/tslime2.vim'

[[plugins]]
repo = 'jgdavey/tslime.vim'

# Complementation
[[plugins]]
repo = 'ervandew/supertab'

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'
add_hook = '''
  " Manually create key mappings (to avoid rebinding C-\)
  let g:tmux_navigator_no_mappings = 1

  nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
  nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
  nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
  nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
'''

# Git
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  set signcolumn=yes
  set updatetime=1000
'''

# Color
[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
  " Color
  let g:hybrid_use_Xresources = 1
  let g:hybrid_reduced_contrast = 1
  colorscheme hybrid
  set background=dark
'''

# TOML
[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  let g:airline_powerline_fonts = 1
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
hook_add = '''
'''
depends = 'vim-airline/vim-airline'

# [[plugins]]
# repo = 'itchyny/lightline.vim'
# hook_add = '''
#   " lightline
#   " http://itchyny.hatenablog.com/entry/20130828/1377653592
#   let g:lightline = {
#           \ 'colorscheme': 'wombat',
#           \ 'mode_map': {'c': 'NORMAL'},
#           \ 'active': {
#           \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
#           \ },
#           \ 'component_function': {
#           \   'modified': 'LightLineModified',
#           \   'readonly': 'LightLineReadonly',
#           \   'fugitive': 'LightLineFugitive',
#           \   'filename': 'LightLineFilename',
#           \   'fileformat': 'LightLineFileformat',
#           \   'filetype': 'LightLineFiletype',
#           \   'fileencoding': 'LightLineFileencoding',
#           \   'mode': 'LightLineMode'
#           \ }
#           \ }

#   function! LightLineModified()
#     return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
#   endfunction

#   function! LightLineReadonly()
#     return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
#   endfunction

#   function! LightLineFilename()
#     return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
#           \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
#           \  &ft == 'unite' ? unite#get_status_string() :
#           \  &ft == 'vimshell' ? vimshell#get_status_string() :
#           \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
#           \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
#   endfunction

#   function! LightLineFugitive()
#     if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
#       return fugitive#head()
#     else
#       return ''
#     endif
#   endfunction

#   function! LightLineFileformat()
#     return winwidth(0) > 70 ? &fileformat : ''
#   endfunction

#   function! LightLineFiletype()
#     return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
#   endfunction

#   function! LightLineFileencoding()
#     return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
#   endfunction

#   function! LightLineMode()
#     return winwidth(0) > 60 ? lightline#mode() : ''
#   endfunction
# '''

[[plugins]]
repo = 'neomake/neomake'
hook_source = '''
  " open the neomake error window automatically when an error is found
  let g:neomake_open_list = 2

  augroup haskell
    autocmd!

    " Options for Haskell Syntax Check
    autocmd FileType haskell let g:neomake_haskell_ghc_mod_args = '-g-Wall'

    " Use one of the below settings and :Neomake.
    autocmd FileType haskell let g:neomake_haskell_enabled_makers = ['hdevtools']
    autocmd FileType haskell let g:neomake_haskell_enabled_makers = ['ghcmod']

    " GHC errors and warnings
    autocmd FileType haskell nmap <silent> <leader>hc :Neomake ghcmod<CR>

    " Haskell Lint
    autocmd FileType haskell nmap <silent> <leader>hl :Neomake hlint<CR>
  augroup END

  " create our actual neomake maker for cargo. Note that neomake ships with a
  " default maker, but it is not using the new error format which resides in
  " nightly.
  "
  " I'm using an explicit 'cargo' exe name incase i want to change the maker
  " name without affecting the binary. `append_file` is used because neomake
  " will automatically append the file path to the end of the full command,
  " which causes cargo to fail. Finally, the errorformat was pulled from
  " a rust.vim PR[1] attempting to fix the problem that causes me to add
  " this whole neomake maker. Thanks to them!!
  "
  " [1]: https://github.com/rust-lang/rust.vim/pull/99#issuecomment-244954595
  let g:neomake_rust_cargo_maker = {
      \ 'exe': 'cargo',
      \ 'args': ['build'],
      \ 'append_file': 0,
      \ 'errorformat': '%Eerror%m,%Z\ %#-->\ %f:%l:%c',
    \ }
  " Replace the default makers list with our new maker, ensuring our cargo maker
  " and not the default maker is what is run when we save.
  let g:neomake_rust_enabled_makers = ['cargo']
  " Automatically run this maker when we save .rs files.
  autocmd FileType rust nmap <silent> <leader>hc :Neomake cargo<CR>
'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
  " https://github.com/dan-t/rusty-tags
  autocmd BufRead *.rs :setlocal tags=./rusty-tags.vi;/
  autocmd BufWrite *.rs :silent! exec "!rusty-tags vi --quiet --start-dir=" . expand('%:p:h') . "&"
  let g:tagbar_type_rust = {
    \ 'ctagstype' : 'rust',
    \ 'kinds' : [
        \'T:types,type definitions',
        \'f:functions,function definitions',
        \'g:enum,enumeration names',
        \'s:structure names',
        \'m:modules,module names',
        \'c:consts,static constants',
        \'t:traits,traits',
        \'i:impls,trait implementations',
    \]
    \}
  let g:tagbar_type_scala = {
    \ 'ctagstype' : 'scala',
    \ 'sro'       : '.',
    \ 'kinds'     : [
      \ 'p:packages',
      \ 'T:types:1',
      \ 't:traits',
      \ 'o:objects',
      \ 'O:case objects',
      \ 'c:classes',
      \ 'C:case classes',
      \ 'm:methods',
      \ 'V:values:1',
      \ 'v:variables:1'
    \ ]
  \ }
'''

[[plugins]]
repo = 'thinca/vim-ref'

# Text
[[plugins]]
repo = 'vim-scripts/Align'
hook_add = '''
let g:loaded_AlignMapsPlugin=1
" Align on equal signs
map <Leader>a= :Align =<CR>
" Align on commas
map <Leader>a, :Align ,<CR>
" Align on pipes
map <Leader>a<bar> :Align <bar><CR>
" Prompt for align character
map <leader>ap :Align
'''

[[plugins]]
repo = 'simnalamburt/vim-mundo'
hook_add = '''
  " Show undo tree
  let g:mapleader = ","
  nmap <silent> <leader>u :MundoToggle<CR>

'''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'michaeljsmith/vim-indent-object'

[[plugins]]
repo = 'easymotion/vim-easymotion'

[[plugins]]
repo = 'ConradIrwin/vim-bracketed-paste'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
hook_source = '''
  " Required for operations modifying multiple buffers like rename.
  set hidden
  set signcolumn=yes
  let g:LanguageClient_serverCommands = {
      \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
      \ 'javascript': ['javascript-typescript-stdio'],
      \ 'python': ['/usr/local/bin/pyls'],
      \ 'cpp': ['clangd'],
      \ 'go': ['gopls'],
      \ 'scala': ['metals-vim'],
      \ }

  nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
  nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
  nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>

  set completefunc=LanguageClient#complete
'''

[[plugins]]
repo = 'junegunn/fzf'
