# Let dein manage dein
# Required:
[[plugins]]
repo = 'Shougo/dein.vim'

# Unite
[[plugins]]
repo = 'Shougo/unite.vim'
hook_add = '''
  let g:unite_enable_start_insert=1
  let g:unite_source_history_yank_enable=1
  let g:mapleader = ","
  nnoremap <silent><Leader>b :Unite buffer<CR>
  nnoremap <silent><Leader>o :UniteWithBufferDir -buffer-name=files file <CR>
  nnoremap <silent><Leader>gp :Unite grep <CR>
'''

# Translate
[[plugins]]
repo = 'daisuzu/translategoogle.vim'

[[plugins]]
repo = 'kmnk/vim-unite-giti'
hook_add = '''
  " giti
  nmap <Space>gd <SID>(git-diff-cached)
  nmap <Space>gD <SID>(git-diff)
  nmap <Space>gf <SID>(git-fetch-now)
  nmap <Space>gF <SID>(git-fetch)
  nmap <Space>gp <SID>(git-push-now)
  nmap <Space>gP <SID>(git-pull-now)
  nmap <Space>gl <SID>(git-log-line)
  nmap <Space>gL <SID>(git-log)

  " unite prefix key
  nnoremap [unite] <Nop>
  nmap <Leader>. [unite]

  nmap [unite]gg    <SID>(giti-sources)
  nmap [unite]gst   <SID>(git-status)
  nmap [unite]gb    <SID>(git-branch)
  nmap [unite]gB    <SID>(git-branch_all)
  nmap [unite]gc    <SID>(git-config)
  nmap [unite]gl    <SID>(git-log)
  nmap [unite]gL    <SID>(git-log-this-file)

  " giti {{{
  if globpath(&rtp, 'plugin/giti.vim') != ''
    let g:giti_log_default_line_count = 100
    nnoremap <expr><silent> <SID>(git-diff)        ':<C-u>GitiDiff ' . expand('%:p') . '<CR>'
    nnoremap <expr><silent> <SID>(git-diff-cached) ':<C-u>GitiDiffCached ' . expand('%:p') .  '<CR>'
    nnoremap       <silent> <SID>(git-fetch-now)    :<C-u>GitiFetch<CR>
    nnoremap       <silent> <SID>(git-fetch)        :<C-u>GitiFetch 
    nnoremap <expr><silent> <SID>(git-push-now)    ':<C-u>GitiPushWithSettingUpstream origin ' . giti#branch#current_name() . '<CR>'
    nnoremap       <silent> <SID>(git-push)         :<C-u>GitiPush 
    nnoremap       <silent> <SID>(git-pull-now)     :<C-u>GitiPull<CR>
    nnoremap       <silent> <SID>(git-pull)         :<C-u>GitiPull 
    nnoremap       <silent> <SID>(git-log-line)     :<C-u>GitiLogLine ' . expand('%:p') . '<CR>'
    nnoremap       <silent> <SID>(git-log)          :<C-u>GitiLog ' . expand('%:p') . '<CR>'

    nnoremap <silent> <SID>(giti-sources)   :<C-u>Unite giti<CR>
    nnoremap <silent> <SID>(git-status)     :<C-u>Unite giti/status<CR>
    nnoremap <silent> <SID>(git-branch)     :<C-u>Unite giti/branch<CR>
    nnoremap <silent> <SID>(git-branch_all) :<C-u>Unite giti/branch_all<CR>
    nnoremap <silent> <SID>(git-config)     :<C-u>Unite giti/config<CR>
    nnoremap <silent> <SID>(git-log)        :<C-u>Unite giti/log<CR>

    nnoremap <silent><expr> <SID>(git-log-this-file) ':<C-u>Unite giti/log:' . expand('%:p') . '<CR>'
  endif
  " }}}
'''

# vimproc
[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

# filer
[[plugins]]
repo = 'Shougo/vimfiler.vim'
hook_add = '''
  " VimFiler
  let g:mapleader = ","
  let g:vimfiler_as_default_explorer = 1
  nnoremap <silent> <leader>ft :VimFilerTab<CR>
  nnoremap <silent> <leader>fe :VimFilerExplorer<CR>
  nnoremap <silent> <leader>ff :VimFilerBufferDir<CR>
'''

# Snipet
[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_source = '''
  " neosnippet
  " Plugin key-mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2
  endif
'''
on_i = 1
on_ft = ['snippets']
depends = ['neosnippet-snippets']

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# Deoplete
[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#sources={} 
  let g:deoplete#sources._=['buffer', 'member', 'tag', 'file', 'omni', 'ultisnips'] 
  let g:deoplete#omni#input_patterns={} 
  let g:deoplete#omni#input_patterns.scala='[^. *\t]\.\w*'
'''
on_i = 1

[[plugins]]
repo = 'Shougo/vimshell'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup=1
  let g:indent_guides_start_level=2
  let g:indent_guides_auto_colors=0
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=235
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=234
  let g:indent_guides_color_change_percent = 30
  let g:indent_guides_guide_size = 1
'''

# [[plugins]]
# repo = 'bronson/vim-trailing-whitespace'

# CtrlP
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
  let g:ctrlp_max_files=0
  let g:ctrlp_show_hidden=1
  let g:ctrlp_custom_ignore = { 'dir': '\v[\/](.git|.cabal-sandbox|.stack-work)$' }

  " Fuzzy find files
  let g:mapleader = ","
  let g:maplocalleader = ","
  nnoremap <silent> <leader><space> :CtrlP<CR>
  '''

# Tmux
[[plugins]]
repo = 'sjl/tslime2.vim'

[[plugins]]
repo = 'jgdavey/tslime.vim'

# Complementation
[[plugins]]
repo = 'ervandew/supertab'

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'
add_hook = '''
  " Manually create key mappings (to avoid rebinding C-\)
  let g:tmux_navigator_no_mappings = 1

  nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
  nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
  nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
  nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
'''

# Git
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

# Color
[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
  " Color
  let g:hybrid_use_Xresources = 1
  let g:hybrid_reduced_contrast = 1
  colorscheme hybrid
  set background=dark
'''

# TOML
[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  let g:airline_powerline_fonts = 1
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
hook_add = '''
'''
depends = 'vim-airline/vim-airline'

# [[plugins]]
# repo = 'itchyny/lightline.vim'
# hook_add = '''
#   " lightline
#   " http://itchyny.hatenablog.com/entry/20130828/1377653592
#   let g:lightline = {
#           \ 'colorscheme': 'wombat',
#           \ 'mode_map': {'c': 'NORMAL'},
#           \ 'active': {
#           \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
#           \ },
#           \ 'component_function': {
#           \   'modified': 'LightLineModified',
#           \   'readonly': 'LightLineReadonly',
#           \   'fugitive': 'LightLineFugitive',
#           \   'filename': 'LightLineFilename',
#           \   'fileformat': 'LightLineFileformat',
#           \   'filetype': 'LightLineFiletype',
#           \   'fileencoding': 'LightLineFileencoding',
#           \   'mode': 'LightLineMode'
#           \ }
#           \ }

#   function! LightLineModified()
#     return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
#   endfunction

#   function! LightLineReadonly()
#     return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
#   endfunction

#   function! LightLineFilename()
#     return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
#           \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
#           \  &ft == 'unite' ? unite#get_status_string() :
#           \  &ft == 'vimshell' ? vimshell#get_status_string() :
#           \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
#           \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
#   endfunction

#   function! LightLineFugitive()
#     if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
#       return fugitive#head()
#     else
#       return ''
#     endif
#   endfunction

#   function! LightLineFileformat()
#     return winwidth(0) > 70 ? &fileformat : ''
#   endfunction

#   function! LightLineFiletype()
#     return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
#   endfunction

#   function! LightLineFileencoding()
#     return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
#   endfunction

#   function! LightLineMode()
#     return winwidth(0) > 60 ? lightline#mode() : ''
#   endfunction
# '''

[[plugins]]
repo = 'scrooloose/syntastic'
hook_add = '''
  set statusline+=%#warningmsg#
  set statusline+=%{exists('g:loaded_syntastic_plugin')?SyntasticStatuslineFlag():''}
  set statusline+=%*

  " エラー行に sign を表示
  let g:syntastic_enable_signs = 1
  " location list を常に更新
  let g:syntastic_always_populate_loc_list = 1
  " location list を常に表示
  let g:syntastic_auto_loc_list = 0
  " ファイルを開いた時にチェックを実行する
  let g:syntastic_check_on_open = 0
  " :wq で終了する時もチェックする
  let g:syntastic_check_on_wq = 0
'''

[[plugins]]
repo = 'neomake/neomake'
hook_source = '''
  " open the neomake error window automatically when an error is found
  let g:neomake_open_list = 2

  augroup haskell
    autocmd!

    " Options for Haskell Syntax Check
    autocmd FileType haskell let g:neomake_haskell_ghc_mod_args = '-g-Wall'

    " Use one of the below settings and :Neomake.
    autocmd FileType haskell let g:neomake_haskell_enabled_makers = ['hdevtools']
    autocmd FileType haskell let g:neomake_haskell_enabled_makers = ['ghcmod']

    " GHC errors and warnings
    autocmd FileType haskell nmap <silent> <leader>hc :Neomake ghcmod<CR>

    " Haskell Lint
    autocmd FileType haskell nmap <silent> <leader>hl :Neomake hlint<CR>
  augroup END

  " create our actual neomake maker for cargo. Note that neomake ships with a
  " default maker, but it is not using the new error format which resides in
  " nightly.
  "
  " I'm using an explicit 'cargo' exe name incase i want to change the maker
  " name without affecting the binary. `append_file` is used because neomake
  " will automatically append the file path to the end of the full command,
  " which causes cargo to fail. Finally, the errorformat was pulled from
  " a rust.vim PR[1] attempting to fix the problem that causes me to add
  " this whole neomake maker. Thanks to them!!
  "
  " [1]: https://github.com/rust-lang/rust.vim/pull/99#issuecomment-244954595
  let g:neomake_rust_cargo_maker = {
      \ 'exe': 'cargo',
      \ 'args': ['build'],
      \ 'append_file': 0,
      \ 'errorformat': '%Eerror%m,%Z\ %#-->\ %f:%l:%c',
    \ }
  " Replace the default makers list with our new maker, ensuring our cargo maker
  " and not the default maker is what is run when we save.
  let g:neomake_rust_enabled_makers = ['cargo']
  " Automatically run this maker when we save .rs files.
  autocmd FileType rust nmap <silent> <leader>hc :Neomake cargo<CR>
'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
  " https://github.com/dan-t/rusty-tags
  autocmd BufRead *.rs :setlocal tags=./rusty-tags.vi;/
  autocmd BufWrite *.rs :silent! exec "!rusty-tags vi --quiet --start-dir=" . expand('%:p:h') . "&"
  let g:tagbar_type_rust = {
    \ 'ctagstype' : 'rust',
    \ 'kinds' : [
        \'T:types,type definitions',
        \'f:functions,function definitions',
        \'g:enum,enumeration names',
        \'s:structure names',
        \'m:modules,module names',
        \'c:consts,static constants',
        \'t:traits,traits',
        \'i:impls,trait implementations',
    \]
    \}
  let g:tagbar_type_scala = {
    \ 'ctagstype' : 'scala',
    \ 'sro'       : '.',
    \ 'kinds'     : [
      \ 'p:packages',
      \ 'T:types:1',
      \ 't:traits',
      \ 'o:objects',
      \ 'O:case objects',
      \ 'c:classes',
      \ 'C:case classes',
      \ 'm:methods',
      \ 'V:values:1',
      \ 'v:variables:1'
    \ ]
  \ }
'''

[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'rhysd/unite-redpen.vim'
hook_add = '''
  let g:redpen_default_config_path = $HOME . '/.config/redpen/conf/redpen-conf-ja.xml'
  '''

# Text
[[plugins]]
repo = 'vim-scripts/Align'
hook_add = '''
let g:loaded_AlignMapsPlugin=1
" Align on equal signs
map <Leader>a= :Align =<CR>
" Align on commas
map <Leader>a, :Align ,<CR>
" Align on pipes
map <Leader>a<bar> :Align <bar><CR>
" Prompt for align character
map <leader>ap :Align
'''

[[plugins]]
repo = 'simnalamburt/vim-mundo'
hook_add = '''
  " Show undo tree
  let g:mapleader = ","
  nmap <silent> <leader>u :MundoToggle<CR>

'''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'michaeljsmith/vim-indent-object'

[[plugins]]
repo = 'easymotion/vim-easymotion'

[[plugins]]
repo = 'ConradIrwin/vim-bracketed-paste'

[[plugins]]
repo = 'simeji/winresizer'
