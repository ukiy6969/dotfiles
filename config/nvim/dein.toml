# Let dein manage dein
# Required:
[[plugins]]
repo = 'Shougo/dein.vim'

# Unite
[[plugins]]
repo = 'Shougo/unite.vim'
hook_add = '''
  let g:unite_enable_start_insert=1
  let g:unite_source_history_yank_enable=1
'''

# Translate
[[plugins]]
repo = 'daisuzu/translategoogle.vim'

[[plugins]]
repo = 'kmnk/vim-unite-giti'

# vimproc
[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

# filer
[[plugins]]
repo = 'Shougo/vimfiler.vim'
hook_add = '''
  let g:vimfiler_as_default_explorer = 1
'''

# Snipet
[[plugins]]
repo = 'Shougo/neosnippet.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# Deoplete
[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  let g:deoplete#enable_at_startup = 1
  inoremap <expr><tab> pumvisible() ? "\<C-n>" :
        \ neosnippet#expandable_or_jumpable() ?
        \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''

[[plugins]]
repo = 'Shougo/vimshell'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup=1
  let g:indent_guides_start_level=2
  let g:indent_guides_auto_colors=0
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=235
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=234
  let g:indent_guides_color_change_percent = 30
  let g:indent_guides_guide_size = 1
'''

# [[plugins]]
# repo = 'bronson/vim-trailing-whitespace'

# CtrlP
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'

# Tmux
[[plugins]]
repo = 'sjl/tslime2.vim'

[[plugins]]
repo = 'jgdavey/tslime.vim'

# Complementation
[[plugins]]
repo = 'ervandew/supertab'

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'

# Git
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

# Color
[[plugins]]
repo = 'w0ng/vim-hybrid'

# TOML
[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'vim-airline/vim-airline'

# [[plugins]]
# repo = 'itchyny/lightline.vim'
# hook_add = '''
#   " lightline
#   " http://itchyny.hatenablog.com/entry/20130828/1377653592
#   let g:lightline = {
#           \ 'colorscheme': 'wombat',
#           \ 'mode_map': {'c': 'NORMAL'},
#           \ 'active': {
#           \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
#           \ },
#           \ 'component_function': {
#           \   'modified': 'LightLineModified',
#           \   'readonly': 'LightLineReadonly',
#           \   'fugitive': 'LightLineFugitive',
#           \   'filename': 'LightLineFilename',
#           \   'fileformat': 'LightLineFileformat',
#           \   'filetype': 'LightLineFiletype',
#           \   'fileencoding': 'LightLineFileencoding',
#           \   'mode': 'LightLineMode'
#           \ }
#           \ }

#   function! LightLineModified()
#     return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
#   endfunction

#   function! LightLineReadonly()
#     return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
#   endfunction

#   function! LightLineFilename()
#     return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
#           \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
#           \  &ft == 'unite' ? unite#get_status_string() :
#           \  &ft == 'vimshell' ? vimshell#get_status_string() :
#           \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
#           \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
#   endfunction

#   function! LightLineFugitive()
#     if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
#       return fugitive#head()
#     else
#       return ''
#     endif
#   endfunction

#   function! LightLineFileformat()
#     return winwidth(0) > 70 ? &fileformat : ''
#   endfunction

#   function! LightLineFiletype()
#     return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
#   endfunction

#   function! LightLineFileencoding()
#     return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
#   endfunction

#   function! LightLineMode()
#     return winwidth(0) > 60 ? lightline#mode() : ''
#   endfunction
# '''

[[plugins]]
repo = 'scrooloose/syntastic'
hook_add = '''
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*

  " エラー行に sign を表示
  let g:syntastic_enable_signs = 1
  " location list を常に更新
  let g:syntastic_always_populate_loc_list = 1
  " location list を常に表示
  let g:syntastic_auto_loc_list = 0
  " ファイルを開いた時にチェックを実行する
  let g:syntastic_check_on_open = 0
  " :wq で終了する時もチェックする
  let g:syntastic_check_on_wq = 0
'''

[[plugins]]
repo = 'neomake/neomake'

[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'rhysd/unite-redpen.vim'
hook_add = '''
let g:redpen_default_config_path = $HOME . '/.config/redpen/conf/redpen-conf-ja.xml'
'''

# Text
[[plugins]]
repo = 'vim-scripts/Align'

[[plugins]]
repo = 'simnalamburt/vim-mundo'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'michaeljsmith/vim-indent-object'

[[plugins]]
repo = 'easymotion/vim-easymotion'

[[plugins]]
repo = 'ConradIrwin/vim-bracketed-paste'
